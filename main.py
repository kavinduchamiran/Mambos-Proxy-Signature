import gmpy2 as gm
import functions as fn
import random

# rs = gm.random_state()

# q = fn.generate_prime(511)
# p = q*2 + 1
#
# while(not gm.is_prime(p)):
#     q = fn.generate_prime(511)
#     p = q * 2 + 1
#
# print(q)
# print(p)

q = gm.mpz(6703903964971298549787012499102923063739682609682746093811160926804801890221671406527729788070298930569933395670018233282113329633315901313810958385152023)
p = gm.mpz(13407807929942597099574024998205846127479365219365492187622321853609603780443342813055459576140597861139866791340036466564226659266631802627621916770304047)

# g = random.randrange(1, p)
#
# p1 = gm.powmod(g, q, p)
# p2 = gm.powmod(g, 2, p)
#
# while(p1 == 1 or p2 == 1):
#     g = random.randrange(1, p)
#
#     p1 = gm.powmod(g, q, p)
#     p2 = gm.powmod(g, 2, p)

g = gm.mpz(8710818255379839923196548866147732015636108867054301571579120201404656816237014445780162103674562653392697980776256695018015245076267408158469291270696559)

# s = random.randrange(1, p-1)
# v = gm.powmod(g, s, p)

s = gm.mpz(6603076457106034848742957409797976144863570308259298850794007927122882368071832808623387721809154712398085958478809285222917739832130418213190888381666320)
original_private = s

v = gm.mpz(10815388246748225787573331543858716487437979979676928077473442812363936255694810219792839605343315482959547749784354782242081984831399046543073178981168692)
original_public = v

k = random.randrange(1, p-2)
K = gm.powmod(g, k, p)

k = gm.mpz(934399007794975508151188738151484151961916816169553860202339985884764541480857959125079975808439200383790758038133259931519923138325313821515533581351682)
K = gm.mpz(3970790412583064084756949362240295935927251035110845543874273568343077539733199222646540796388072296031096069412048165264625345860706440741872236283170790)

# sigma = (s + k * K) % (p - 1)

sigma = gm.mpz(1599844828480432996670936450307491188612511817228907936025817182927186568673377894841834068826933399374833623579771859973397175895631949922313558451139090)
proxy_private = sigma

lhs = gm.powmod(g, sigma, p)

temp = gm.powmod(K, K, p)
rhs = (v * temp) % p

proxy_public = rhs

print(lhs == rhs)


m = 12345678

(ori_r, ori_sig) = fn.sign(m, g, original_private, p)
ori_verify = fn.verify(p, g, original_public, ori_r, ori_sig, m)

print(ori_verify)

(proxy_r, proxy_sig) = fn.sign(m, g, proxy_private, p)
proxy_verify = fn.verify(p, g, proxy_public, proxy_r, proxy_sig, m)

print(proxy_verify)

(ori_r, ori_sig) = fn.sign(m, g, original_private, p)
ori_verify = fn.verify(p, g, proxy_public, ori_r, ori_sig, m)

print(ori_verify)

(proxy_r, proxy_sig) = fn.sign(m, g, proxy_private, p)
proxy_verify = fn.verify(p, g, original_public, proxy_r, proxy_sig, m)

print(proxy_verify)

